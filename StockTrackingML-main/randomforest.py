# -*- coding: utf-8 -*-
"""RandomForest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bC53csILYioWGudQnr-IXa1fHPpYTHW3
"""

#Import the Keras Libraries

import keras
from keras.models import Sequential
from keras.layers import CuDNNLSTM, Dense, Dropout, LSTM
from keras.optimizers import Adam
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.model_selection import GridSearchCV

data = pd.read_csv('AAPL.csv')

# convert date column to datetime format
data['Date'] = pd.to_datetime(data['Date'])

start_date = pd.to_datetime('2023-01-01')
end_date = pd.to_datetime('2023-04-28')

# Filter the DataFrame based on the date range
data = data[(data['Date'] >= start_date) & (data['Date'] <= end_date)]

# extract year and month information and store in separate columns
data['Year'] = data['Date'].dt.year
data['Month'] = data['Date'].dt.month

# drop the original date column
data = data.drop('Date', axis=1)

# prepare data
x = data.drop('Close', axis = 1)
y = data['Close']


# split data
X_train, X_test, y_train, y_test = train_test_split(x, y, train_size=0.2, random_state=42)



print(X_train)
print(X_test)

param_grid = {
    'n_estimators': [50, 100, 200, 500, 1000],
    'max_depth': [3, 5, 7, 10, 15, 30, 50, 100]
}

rf = RandomForestRegressor(random_state=42)


grid_search = GridSearchCV(rf, param_grid, cv=5)
grid_search.fit(X_train, y_train)

best_params = grid_search.best_params_

print(best_params)

rf.fit(X_train, y_train)

y_pred = rf.predict(X_test)

mse = mean_squared_error(y_test, y_pred)

print("MSE:", mse)

# create a range of numbers from 1 to the length of y_test
x_ax = range(len(y_test))

# plot the actual and predicted values
plt.plot(x_ax, y_test, label="original")
plt.plot(x_ax, y_pred, label="predicted")

# set the axis labels and title
plt.xlabel("Days since 01/01/2023")
plt.ylabel("AAPL stock price")
plt.title("Random Forest Regression - Mean Squared Error: " + str(round(mse, 2)))

# add legend and show the plot
plt.legend()
plt.show()
